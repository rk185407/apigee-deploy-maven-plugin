<?xml version="1.0" encoding="UTF-8" standalone="yes"?><ProxyEndpoint name="default">    <Description></Description>    <FaultRules></FaultRules>    <DefaultFaultRule name="all">        <AlwaysEnforce>true</AlwaysEnforce>        <Step>            <Condition>(fault.name = &quot;QuotaViolation&quot;)</Condition>            <FaultRules></FaultRules>            <Name>AssignQuotaLimitViolationError</Name>        </Step>        <Step>            <Condition>(fault.name = &quot;SpikeArrestViolation&quot;)</Condition>            <FaultRules></FaultRules>            <Name>AssignSpikeArrestViolationError</Name>        </Step>        <Step>            <Condition>(fault.name = &quot;ApiKeyNotApproved&quot;) or                (fault.name = &quot;CompanyStatusNotActive&quot;) or                (fault.name = &quot;DeveloperStatusNotActive&quot;) or                (fault.name = &quot;FailedToResolveAPIKey&quot;) or                (fault.name = &quot;InvalidApiKey&quot;) or                (fault.name = &quot;InvalidApiKeyForGivenResource&quot;) or                (fault.name = &quot;app_not_approved&quot;)</Condition>            <FaultRules></FaultRules>            <Name>AssignVerifyApiKeyError</Name>        </Step>        <Step>            <Condition>(servicecallout.AuthenticateUser.failed = true) and (authenticationResponse.status.code == &quot;400&quot;)</Condition>            <FaultRules></FaultRules>            <Name>AssignUserUnauthorizedError</Name>        </Step>        <Step>            <Condition>(servicecallout.AuthenticateUser.failed = false) and (authenticationResponse.header.transactionId != request.header.transactionId)</Condition>            <FaultRules></FaultRules>            <Name>AssignCrossTalkError</Name>        </Step>        <Step>            <Condition>(servicecallout.ExchangeAccessTokenForJwt.failed = true) and (accessTokenToJwtResponse.status.code == &quot;400&quot;)</Condition>            <FaultRules></FaultRules>            <Name>AssignInvalidUserError</Name>        </Step>        <Step>            <Condition>(fault.name = &quot;invalid_refresh_token&quot;) or (fault.name = &quot;invalid_access_token&quot;)</Condition>            <FaultRules></FaultRules>            <Name>AssignRevokeTokenError</Name>        </Step>        <Step>            <Condition>flow.error.code = null</Condition>            <FaultRules></FaultRules>            <Name>AssignGenericError</Name>        </Step>        <Step>            <FaultRules></FaultRules>            <Name>WhitelistResponseHeaders</Name>        </Step>        <Step>            <Condition>(request.header.accept = &quot;application/xml&quot;) or (request.header.accept Matches &quot;application/xml;*&quot;)</Condition>            <FaultRules></FaultRules>            <Name>RaiseFaultDefaultErrorResponseXml</Name>        </Step>        <Step>            <FaultRules></FaultRules>            <Name>RaiseFaultDefaultErrorResponseJson</Name>        </Step>        <Step>            <Name>bsp-apims-main-postflow</Name>        </Step>    </DefaultFaultRule>    <PreFlow name="PreFlow">        <Request>            <Step>                <Name>ValidateRequest</Name>            </Step>            <Step>                <Name>PrepareRequest</Name>            </Step>            <Step>                <Name>js-set-enable-attrib</Name>            </Step>            <Step>                <Name>bsp-apims-main-preflow</Name>            </Step>        </Request>        <Response></Response>    </PreFlow>    <PostFlow name="PostFlow">        <Response>            <Step>                <Name>PrepareResponse</Name>            </Step>            <Step>                <Name>bsp-apims-main-postflow</Name>            </Step>        </Response>    </PostFlow>    <PostClientFlow name="PostClientFlow">        <Response>            <Step>                <Name>LogResponse</Name>            </Step>            <Step>                <Name>bsp-apims-main-postclient-flow</Name>            </Step>        </Response>    </PostClientFlow>    <Flows>        <Flow name="GetAccounts-v1">            <Description>Get accounts</Description>            <Request>                <Step>                    <Name>SetPathSuffix</Name>                </Step>                <Step>                    <Name>extract-endpoint</Name>                </Step>                <Step>                    <Condition>(private.ncr.api.global-quota-enabled == &quot;enabled&quot;)</Condition>                    <Name>bsp-apims-quota-flow</Name>                </Step>            </Request>            <Response></Response>            <Condition>(proxy.pathsuffix JavaRegex &quot;/v1/accounts/*&quot;) and (request.verb = &quot;GET&quot;)</Condition>        </Flow>        <Flow name="GetAccount-v1">            <Description>Get account</Description>            <Request>                <Step>                    <Name>SetPathSuffix</Name>                </Step>                <Step>                    <Name>extract-endpoint</Name>                </Step>                <Step>                    <Condition>(private.ncr.api.global-quota-enabled == &quot;enabled&quot;)</Condition>                    <Name>bsp-apims-quota-flow</Name>                </Step>            </Request>            <Response></Response>            <Condition>(proxy.pathsuffix MatchesPath &quot;/v1/accounts/*&quot;) and (request.verb = &quot;GET&quot;)</Condition>        </Flow>        <Flow name="RegisterAccounts-v1">            <Description>Register accounts</Description>            <Request>                <Step>                    <Name>SetPathSuffix</Name>                </Step>                <Step>                    <Name>extract-endpoint</Name>                </Step>                <Step>                    <Condition>(private.ncr.api.global-quota-enabled == &quot;enabled&quot;)</Condition>                    <Name>bsp-apims-quota-flow</Name>                </Step>            </Request>            <Response></Response>            <Condition>(proxy.pathsuffix JavaRegex &quot;/v1/accounts/*&quot;) and (request.verb = &quot;PUT&quot;)</Condition>        </Flow>        <Flow name="UpdateAccount-v1">            <Description>Update account</Description>            <Request>                <Step>                    <Name>SetPathSuffix</Name>                </Step>                <Step>                    <Name>extract-endpoint</Name>                </Step>                <Step>                    <Condition>(private.ncr.api.global-quota-enabled == &quot;enabled&quot;)</Condition>                    <Name>bsp-apims-quota-flow</Name>                </Step>            </Request>            <Response></Response>            <Condition>(proxy.pathsuffix MatchesPath &quot;/v1/accounts/*&quot;) and (request.verb = &quot;PUT&quot;)</Condition>        </Flow>        <Flow name="InvalidPath">            <Description>Invalid path</Description>            <Request>                <Step>                    <Name>SetPathSuffix</Name>                </Step>                <Step>                    <Name>InvalidPathError</Name>                </Step>                <Step>                    <Name>RaiseEmptyFault</Name>                </Step>                <Step>                    <Name>extract-endpoint</Name>                </Step>                <Step>                    <Condition>(private.ncr.api.global-quota-enabled == &quot;enabled&quot;)</Condition>                    <Name>bsp-apims-quota-flow</Name>                </Step>            </Request>            <Response></Response>        </Flow>    </Flows>    <HTTPProxyConnection>        <BasePath>/digitalbanking/db-accounts</BasePath>        <VirtualHost>default</VirtualHost>        <VirtualHost>secure</VirtualHost>    </HTTPProxyConnection>    <RouteRule name="default">        <TargetEndpoint>ApxTargetEndPoint</TargetEndpoint>    </RouteRule></ProxyEndpoint>